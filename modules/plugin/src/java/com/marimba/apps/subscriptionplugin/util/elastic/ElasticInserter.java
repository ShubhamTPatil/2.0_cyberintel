// Copyright 2017, BMC Software. All Rights Reserved.// Confidential and Proprietary Information of BMC Software.// Protected by or for use under one or more of the following patents:// U.S Patent Nos. 5,919,247, 6,272,536, 6,367,075, 6,381,631,// and 6,430,608. Other Patents Pending.package com.marimba.apps.subscriptionplugin.util.elastic;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import com.marimba.apps.subscriptionplugin.util.json.JSONObject;import com.marimba.intf.plugin.IPluginContext;import com.marimba.apps.subscriptionplugin.IPluginDebug;import com.marimba.apps.subscriptionplugin.ISubsPluginContext;import com.marimba.apps.subscriptionplugin.SubsPluginContext;public class ElasticInserter extends AbstractPostRequest implements IPluginDebug {	private static final String DEFAULT_ELASTIC_URL = "http://localhost:9200/marimba/securitymgmt";	private static final String ELASTIC_PROP = "subscriptionplugin.elastic.url";	private final JSONObject record;	private final String url;	private static IPluginContext context;	private static ISubsPluginContext sContext;	public ElasticInserter(IPluginContext _context, JSONObject record) {		super(_context);        this.context = _context;		this.record = record;		String temp = context.getChannelProperties().getProperty(ELASTIC_PROP);		if(temp != null) {			this.url = temp;		} else {			this.url = DEFAULT_ELASTIC_URL;		}		sContext = new SubsPluginContext();		sContext.registerPluginContext(context);	}	@Override    public void debug(boolean debugType, String msg) {        if (debugType) {			sContext.logToConsole("ElasticInserter.java -- " + msg);        }    }	@Override	protected String getConnectionURL() {		return url;	}	@Override	protected boolean writeRequest(OutputStream out) throws IOException {		byte[] recordBytes = record.toString().getBytes();		out.write(recordBytes, 0, recordBytes.length);		out.flush();		return true;	}	@Override	protected void readResponse(InputStream in, int contentLength) throws IOException {		while(in.available() > 0) {			ByteArrayOutputStream bout = new ByteArrayOutputStream();			bout.write(in.read());			String s = new String(bout.toByteArray());			debug(INFO, "readResponse(), Response from Elastic: "+s);		}	}}