<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
    <meta name="GENERATOR" content="Microsoft FrontPage 4.0" />
    <meta name="TEMPLATEBASE" content="BMC WWP v 4.0 (Apr-13-06 v6.2 ANSI)" />
    <meta name="LASTUPDATED" content="11/16/09 16:16:45" />
    <title>Use cases</title>
    <link rel="StyleSheet" href="Remedy.css" type="text/css" />
    <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>

    <script type="text/javascript" language="JavaScript1.2" src="scripts/expand.js"></script>
  </head>

  <body onLoad="WWHUpdate();" onUnload="WWHUnload();" onKeyDown="WWHHandleKeyDown((document.all||document.getElementById||document.layers)?event:null);" onKeyPress="WWHHandleKeyPress((document.all||document.getElementById||document.layers)?event:null);" onKeyUp="WWHHandleKeyUp((document.all||document.getElementById||document.layers)?event:null);">

    
    

    <blockquote>
<script type="text/javascript" language="JavaScript1.2">
   WWHFrame.WWHHelp.mRemedyTitle = "Use cases";
   WWHFrame.WWHHelp.fRemedyShowTitle();
</script><a name="wp99596"> </a><p class="pBody">This section includes the following topics:</p>
<div class="pSmartList1"><ul class="pSmartList1">
<div class="pSmartList2"><ul class="pSmartList2">
<a name="wp99604"> </a><div class="pSmartList2"><li><a href="javascript:WWHClickedPopup('sm', 'policies-29.htm#wp61069');" onMouseOver="WWHShowPopup('sm', 'policies-29.htm#wp61069', (document.all||document.getElementById||document.layers)?event:null);" onMouseOut="WWHHidePopup();">Overview of scheduling and staging updates</a></li></div>
<a name="wp99611"> </a><div class="pSmartList2"><li><a href="javascript:WWHClickedPopup('sm', 'policies-29.htm#wp61268');" onMouseOver="WWHShowPopup('sm', 'policies-29.htm#wp61268', (document.all||document.getElementById||document.layers)?event:null);" onMouseOut="WWHHidePopup();">Scheduling future update events</a></li></div>
<a name="wp99618"> </a><div class="pSmartList2"><li><a href="javascript:WWHClickedPopup('sm', 'policies-29.htm#wp61077');" onMouseOver="WWHShowPopup('sm', 'policies-29.htm#wp61077', (document.all||document.getElementById||document.layers)?event:null);" onMouseOut="WWHHidePopup();">Staging future update events</a></li></div>
<a name="wp99625"> </a><div class="pSmartList2"><li><a href="javascript:WWHClickedPopup('sm', 'policies-29.htm#wp61120');" onMouseOver="WWHShowPopup('sm', 'policies-29.htm#wp61120', (document.all||document.getElementById||document.layers)?event:null);" onMouseOut="WWHHidePopup();">Managing packages and states using install priority</a></li></div>
<a name="wp99593"> </a><div class="pSmartList2"><li><a href="javascript:WWHClickedPopup('sm', 'policies-29.htm#wp61134');" onMouseOver="WWHShowPopup('sm', 'policies-29.htm#wp61134', (document.all||document.getElementById||document.layers)?event:null);" onMouseOut="WWHHidePopup();">Flexible configuration options</a></li></div>
</ul></div>
</ul></div>
<a name="wp61069"> </a><h4 class="pHeading3">
Overview of scheduling and staging updates
</h4>
<a name="wp61438"> </a><p class="pBody">Policy Manager replaces a channel automatically when the final file name segment of an existing channel&#39;s URL matches the same segment for the new channel in the policy. Policy Manager performs the update as the first operation of the service. In addition to matching the URLs, the updateFrom function removes the replaced channel. The function optimizes file replacement to minimize bandwidth consumption, replacing only files and data that have changed with the new version. UpdateFrom follows the install order and schedule specified by the policy.</p>
<a name="wp61282"> </a><p class="pBody"></p>
<div align="left"><img src="images/bestPractice110dpi.jpg" id="wp61462" border="0" hspace="0" vspace="0"/></div><p class="pBody">
The only exception occurs when you have set the tuner property <b class="cBold">marimba.subscription.nodelete=True</b>. In this case, Policy cannot remove the replaced channel because the configuration option forbids it. Best practice here is to include the replaced channel in the policy with a state of Uninstall.</p>
<a name="wp61268"> </a><h4 class="pHeading3">
Scheduling future update events
</h4>
<a name="wp61070"> </a><p style="text-decoration: none" class="pStepIntro">
To schedule an installation on a future date that replaces one version of a package <em class="cEmphasis">(url-1</em>) with an updated version of the same package <em class="cEmphasis">(url-2</em>)
</p>

<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp61071"> </a><div class="pSmartList1"><li>Create a policy that installs <em class="cEmphasis">url-1</em> for a group of targets.</li></div>
<a name="wp61072"> </a><p class="pIndented1">
Policy installs <em class="cEmphasis">url-1</em> on the specified targets.
</p>
<a name="wp61073"> </a><div class="pSmartList1"><li>In the policy, set a future expiration date <em class="cEmphasis">d</em> for <em class="cEmphasis">url-1</em> and add the updated version of the package (<em class="cEmphasis">url-2</em>), specifying <em class="cEmphasis">d</em> as the future installation date.</li></div>
<a name="wp61074"> </a><p class="pIndented1">
On future date <em class="cEmphasis">d</em>, Policy Service updates from <em class="cEmphasis">url-1</em> to <em class="cEmphasis">url-2</em> on each targeted endpoint.
</p>
</ol></div>
<a name="wp61075"> </a><p class="pBody">Best practice in this case is to specify the same date for expiration of <em class="cEmphasis">url-1</em> and installation of <em class="cEmphasis">url-2</em>. The expiration of <em class="cEmphasis">url-1</em> is an <em class="cEmphasis">implied delete</em>, which (together with the addition of <em class="cEmphasis">url-2</em>) kicks off an updateFrom on date <em class="cEmphasis">d</em>. The updateFrom function optimizes the process by replacing only the files that have changed.</p>
<hr class="NoteRuleTop"/><a name="wp61076"> </a><p class="pNote"><span style="color: #003366">Note: &#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#733;&#64258;&#64258;&#64258;&#64258;</span> Timing is key to updating applications across URLs. If the expiration of <em class="cEmphasis">url-1</em> does not coincide exactly with the installation of <em class="cEmphasis">url-2</em>, data conflicts can occur. In the above example, if <em class="cEmphasis">url-1</em> expires after the installation of <em class="cEmphasis">url-2</em>, then both channels will exist in an <em class="cEmphasis">Installed</em> state during the overlap period. If <em class="cEmphasis">url-1</em> expires before the installation of <em class="cEmphasis">url-2</em>, and you explicitly set the state of <em class="cEmphasis">url-1</em> to Uninstall, the target does not have the package at all during the interim period.</p><hr class="NoteRuleBottom"/><a name="wp61077"> </a><h4 class="pHeading3">
Staging future update events
</h4>
<a name="wp61078"> </a><p style="text-decoration: none" class="pStepIntro">
To stage a future update that replaces one version of a package <em class="cEmphasis">(url-1</em>) with an updated version of the same package <em class="cEmphasis">(url-2</em>)
</p>

<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp61079"> </a><div class="pSmartList1"><li>Create a policy that installs <em class="cEmphasis">url-1</em> for a group of targets.</li></div>
<a name="wp61080"> </a><p class="pIndented1">
Policy installs <em class="cEmphasis">url-1</em> on the specified targets.
</p>
<a name="wp61081"> </a><div class="pSmartList1"><li>In the policy, set a future expiration date <em class="cEmphasis">d</em>, and add <em class="cEmphasis">url-2</em> with an installation state of <em class="cEmphasis">Stage</em>, specifying <em class="cEmphasis">d</em> as the installation date.</li></div>
<a name="wp61082"> </a><p class="pIndented1">
At date <em class="cEmphasis">d</em>, Policy performs an updateFrom (<em class="cEmphasis">url-1</em> to <em class="cEmphasis">url-2)</em>.
</p>
</ol></div>
<a name="wp61083"> </a><p class="pBody">Staging future updates is similar to scheduling - specify the same date <em class="cEmphasis">d</em> for both expiration of the first URL and installation of the second.</p>
<a name="wp61084"> </a><p class="pBody">Policy enables you to set a Primary and Secondary state for a package, so you can set independent scheduling options for each state. In the following example, you stage Channel 2 (an updated application version) to replace Channel&#160;1 (a current application version) on March 1. The older version expires on March 1, and the updateFrom function optimizes the installation of the new version. Note the states you assign to Channel 2 before and after the update.</p>
<a name="wp61119"> </a><p class="pBodyRelative"><img src="images/Policy_help-05-29-7.gif" height="90" width="464" id="wp61087" border="0" hspace="0" vspace="0"/></p>

<a name="wp61120"> </a><h4 class="pHeading3">
Managing packages and states using install priority
</h4>
<a name="wp61121"> </a><p style="text-decoration: none" class="pStepIntro">
To specify prerequisite channels for installation prior to updating an existing channel
</p>

<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp61122"> </a><div class="pSmartList1"><li>Create a policy that installs, say, channels 2 through 5 (in that order) for a group of targets.</li></div>
<a name="wp61123"> </a><p class="pIndented1">
Policy installs channels 2 through 5 on the specified targets.
</p>
<a name="wp61124"> </a><div class="pSmartList1"><li>Modify the policy to install a prerequisite channel before updating an existing channel in the policy.</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp61125"> </a><div class="pSmartList2"><li>Add Channel 1 with a state of <em class="cEmphasis">Install</em> in position #1.</li></div>
<a name="wp61126"> </a><div class="pSmartList2"><li>Remove Channel 3 (<em class="cEmphasis">url-1</em>) and replace it with the updated Channel 3 (<em class="cEmphasis">url-2</em>), still in position #3. Follow the guidelines found in the previous use cases for scheduling and staging updates.</li></div>
<a name="wp61127"> </a><p class="pIndented1">
Policy processes the channels in the following order:
</p>
<a name="wp61128"> </a><div class="pSmartList2"><li>Install Channel 1</li></div>
<a name="wp61129"> </a><div class="pSmartList2"><li>Install Channel 2</li></div>
<a name="wp61130"> </a><div class="pSmartList2"><li>Update Channel 3 (<em class="cEmphasis">url-1</em> to <em class="cEmphasis">url-2</em>)</li></div>
<a name="wp61131"> </a><div class="pSmartList2"><li>Install Channel 4</li></div>
<a name="wp61132"> </a><div class="pSmartList2"><li>Install Channel 5</li></div>
</ol></div>
</ol></div>
<a name="wp61133"> </a><p class="pBody">Policy supports the previous scheduling and staging scenarios when using install priority features to specify the package installation sequence.</p>
<a name="wp61134"> </a><h4 class="pHeading3">
Flexible configuration options
</h4>
<a name="wp61135"> </a><p class="pBody">The powerful configuration options available in Policy Manager enable you to implement a wide range of creative deployment scenarios. For example, say you want to distribute an application as a &quot;one-time&quot; offer for a restricted time period, such as the month of January. If a target doesn&#39;t check in during the month of January, you don&#39;t want that target to have the application. If you want users who update in January to have the software on February 1, you must specify an installation state of <em class="cEmphasis">Install-Persist</em>.</p>
<a name="wp61136"> </a><p style="text-decoration: none" class="pStepIntro">
To distribute an application as a one-time offer in January
</p>

<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp61137"> </a><div class="pSmartList1"><li>Add the application&#39;s URL to a policy.</li></div>
<a name="wp61138"> </a><div class="pSmartList1"><li>Set the policy to expire on January 31.</li></div>
<a name="wp61139"> </a><div class="pSmartList1"><li>Set the installation state to <em class="cEmphasis">Install-Persist</em>.</li></div>
</ol></div>



  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Clear related topics
    //
    WWHClearRelatedTopics();

   // -->
  </script>
    </blockquote>

    
<hr class="REM"/>

<table align="center" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td align="center"><p class="copyright">

Copyright 1996 - 2013
 BMC Software, Inc. All rights reserved.<br/>

 For additional BMC Configuration Management documentation, go to the Customer
Support website at <span style="font-size=12px; font-family: Arial, Verdana, Helvetica, sans-serif"><a href="http://www.bmc.com/support_home" TARGET="_blank">www.bmc.com/support_home</a></span>.
For questions or comments about BMC CM documentation, send
an email to <a href="mailto:mpl_documentation@bmc.com">mpl_documentation@bmc.com</a>.
For product related issues or questions, send an email to Customer Support at <a href="mailto:customer_support@bmc.com"><font face="Arial" size="1">customer_support@bmc.com</font></a>.

    </p></td>
  </tr>
</table>



<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag() + WWHALinksDivTag());
   // -->
  </script>

  </body>
</html>
