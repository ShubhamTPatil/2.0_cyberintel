package com.marimba.apps.securitymgr.utils;import java.io.BufferedReader;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.StringReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.Hashtable;import java.util.ArrayList;import java.util.Iterator;import com.google.gson.stream.JsonToken;import com.google.gson.stream.JsonReader;import com.marimba.apps.securitymgr.utils.json.JSONArray;import com.marimba.apps.securitymgr.utils.json.JSONObject;import com.marimba.castanet.http.HTTPManager;import com.marimba.tools.net.HTTPConfig;import com.marimba.tools.util.DebugFlag;public class ElasticSecurityMgmt {    public final static int DEBUG = DebugFlag.getDebug("SUB/ELASTICUI");    HTTPManager httpMgr;    HTTPConfig httpConfig;    String elasticURL;    private static final String RULE_NAME = "RuleName";    private static final String GROUP_NAME = "GroupName";    public ElasticSecurityMgmt(HTTPManager httpMgr, HTTPConfig httpConfig, String elasticURL) {        this.httpMgr = httpMgr;        this.httpConfig = httpConfig;        this.elasticURL = elasticURL;    }    protected void debug(int level, String msg) {        if(DEBUG >= level) {            System.out.println("ELASTICSECURITYMGMT: "+msg);        }    }        URL getElasticConnectionCheckUrl(String elasticUrl) {        URL u = null;        try {            u = new URL(elasticUrl);            String host = u.getHost();            int port = u.getPort();            if (port < 1) {                port = 80;            }            String protocol = u.getProtocol();            return new URL(protocol + "://" + host + ":" + port);        } catch (Throwable t) {            return u;        }    }        public boolean isElasticUP() {    	boolean retVal = false;        int reqReply = -1;        try {            if (elasticURL == null) {                debug(3, "isConnected() :: elasticUrl - " + elasticURL);                return retVal;            }            URL elasticUrlToconnect = getElasticConnectionCheckUrl(elasticURL);            HttpURLConnection elasticUrlConnection = (HttpURLConnection)elasticUrlToconnect.openConnection();            int httpRetCode = elasticUrlConnection.getResponseCode();            debug(3, "isConnected() :: httpRetCode - " + httpRetCode);            BufferedReader in = new BufferedReader(new InputStreamReader(elasticUrlConnection.getInputStream()));            String inputLine;            StringBuffer response = new StringBuffer();            while ((inputLine = in.readLine()) != null) {                response.append(inputLine);            }            in.close();            switch(httpRetCode) {                case 200:                    debug(3, "isConnected() :: HTTP reply OK, so Elastic Search seemed to have accepted it, printing out reply");                    retVal = true;                    break;                default:                    debug(3, "isConnected() :: HTTP reply returned: " + reqReply);                    break;            }        } catch(Throwable t) {            if(DEBUG >= 3) {            	t.printStackTrace();            }        } finally {            debug(3, "isConnected() :: Request finished transferred...");        }        debug(3, "isConnected() :: retVal - " + retVal);        return retVal;    }    public JSONArray getTopVulnerableRules(String contentId, String profileID, String targetName, long gte, int maxResults) {        JSONObject request = constructRequest(contentId, profileID, targetName, gte, RULE_NAME, maxResults);        System.out.println("ElasticSecurityMgmt: sending request: "+request.toString());        ElasticQuery query = new ElasticQuery(httpMgr, httpConfig, elasticURL, request);        query.sendRequest();        String response = query.getResponse();        return getConvertedResponse(response, RULE_NAME);    }    public JSONArray getTopVulnerableGroups(String contentId, String profileID, String targetName, long gte, int maxResults) {        JSONObject request = constructRequest(contentId, profileID, targetName, gte, GROUP_NAME, maxResults);        System.out.println("ElasticSecurityMgmt: sending request: "+request.toString());        ElasticQuery query = new ElasticQuery(httpMgr, httpConfig, elasticURL, request);        query.sendRequest();        String response = query.getResponse();        return getConvertedResponse(response, GROUP_NAME);    }    public static void main(String[] args) {        ElasticSecurityMgmt mgr = new ElasticSecurityMgmt(null, null, null);        String input = null;        try {            FileInputStream fin = new FileInputStream(new File("e:\\elasticreply.txt"));            ByteArrayOutputStream bout = new ByteArrayOutputStream();            while(fin.available() > 0) {                bout.write(fin.read());            }            bout.flush();            byte[] r = bout.toByteArray();            bout.close();            fin.close();            input = new String(r);        } catch(Throwable t) {            t.printStackTrace();            return;        }        System.out.println(input);        System.out.println(" ************************************");        JSONArray arr = mgr.getConvertedResponse(input, RULE_NAME);        System.out.println(arr.toString());    }    protected JSONArray getConvertedResponse(String input,String responseType) {        debug(3, "Input Response: " + input);        JSONArray arr = new JSONArray();        Hashtable<String, JSONObject> records = new Hashtable<String, JSONObject>();        ArrayList<TempRecord> tempRecords = new ArrayList<TempRecord>();        try {            JSONObject obj = new JSONObject(input);            JSONObject aggregationsObj = obj.getJSONObject("aggregations");            debug(3, "aggregationsObj : " + aggregationsObj);            JSONObject complianceObj = aggregationsObj.getJSONObject("Compliance");            debug(3, "complianceObj : " + complianceObj);            JSONArray bucketArr = complianceObj.getJSONArray("buckets");            debug(3, "bucketArr : " + bucketArr);            JsonReader reader = new JsonReader(new StringReader(bucketArr.toString()));            reader.beginArray();            while(reader.hasNext()) {                reader.beginObject();                boolean isKeyPresent = false;                boolean compliance = false;                while(reader.hasNext()) {                    String bucketName = reader.nextName();                    debug(3,"In outer bucket, evaluating: "+bucketName);                    if("key".equalsIgnoreCase(bucketName)) {                        String keyVal = reader.nextString();                        debug(3,"Read compliance key as: "+keyVal);                        compliance = "pass".equalsIgnoreCase(keyVal);                        debug(3,"Parsing compliance as: "+compliance);                        isKeyPresent = true;                        saveTemporaryRecords(tempRecords,records,compliance);                    } else if(responseType.equalsIgnoreCase(bucketName)) {                        reader.beginObject();                        while(reader.hasNext()) {                            String responseName = reader.nextName();                            if("buckets".equalsIgnoreCase(responseName)) {                                reader.beginArray();                                while(reader.hasNext()) {                                    String categoryName = null;                                    int categoryCount = 0;                                    reader.beginObject();                                    while(reader.hasNext()) {                                        String recordName = reader.nextName();                                        if("key".equalsIgnoreCase(recordName)) {                                            categoryName = reader.nextString();                                        } else if("doc_count".equalsIgnoreCase(recordName)) {                                            categoryCount = reader.nextInt();                                        } else {                                            reader.skipValue();                                        }                                    }                                    reader.endObject();                                    if(isKeyPresent) {                                        saveRecords(records, responseType, categoryName, compliance, categoryCount);                                    }else{                                        debug(3," Wait to save untill compliance key is available ");                                        tempRecords.add(new TempRecord(responseType,categoryName,categoryCount));                                    }                                }                                reader.endArray();                            } else {                                reader.skipValue();                            }                        }                        reader.endObject();                    } else {                        reader.skipValue();                    }                }                reader.endObject();            }            reader.endArray();// end array        } catch (IOException e) {            if(DEBUG >= 3) {                e.printStackTrace();            }        }        for (String key : records.keySet()) {            arr.put(records.get(key));        }        return arr;    }    protected void saveRecords(Hashtable<String, JSONObject> records, String responseType, String categoryName, boolean compliance, int categoryCount){        /* Need to update the records */        JSONObject record = null;        if(!records.containsKey(categoryName)) {            record = new JSONObject();            record.put("Total", "0");            record.put("success", "0");            record.put("failed", "0");            record.put(responseType, categoryName);            records.put(categoryName, record);        } else {            record = records.get(categoryName);        }        if(compliance) {            int curr = Integer.parseInt(record.getString("success"));            int sum = curr + categoryCount;            record.put("success",""+sum);        } else {            int curr = Integer.parseInt(record.getString("failed"));            int sum = curr + categoryCount;            record.put("failed",""+sum);        }        int currTotal = Integer.parseInt(record.getString("Total"));        int sum = currTotal + categoryCount;        record.put("Total",""+sum);    }    // Save Temporary Records that was missed because compliance key was yet to read from bucket array    protected void saveTemporaryRecords(ArrayList<TempRecord> tempRecords, Hashtable<String, JSONObject> records, boolean compliance){        Iterator<TempRecord> i = tempRecords.iterator();        while(i.hasNext()){            TempRecord tR = i.next();            if(tR != null){                saveRecords(records,tR.getResponseType(), tR.getCategoryName(), compliance, tR.getCategoryCount());                i.remove();            }        }    }    protected JSONObject getTermObject(String key, String value) {        JSONObject obj = new JSONObject();        JSONObject term = new JSONObject(); obj.put("term", term);        term.put(key, value);        return obj;    }    protected JSONObject getRange(long gte) {        JSONObject obj = new JSONObject();        JSONObject range = new JSONObject(); obj.put("range", range);        JSONObject timestamp = new JSONObject(); range.put("@timestamp", timestamp);        timestamp.put("gte", gte);        return obj;    }    protected JSONObject constructRequest(String contentId, String profileID, String targetName, long gte, String criteria, int maxResults) {        JSONObject request = new JSONObject();        request.put("size", 0);        JSONObject query = new JSONObject(); request.put("query", query);        JSONObject aggs = new JSONObject(); request.put("aggs", aggs);        JSONObject bool = new JSONObject(); query.put("bool", bool);        JSONArray filter = new JSONArray(); bool.put("filter", filter);        /*Finishing filter*/        if (contentId != null) filter.put(getTermObject("contentId.keyword", contentId));        if (profileID != null) filter.put(getTermObject("profileID.keyword", profileID));        if (targetName != null) filter.put(getTermObject("targetName.keyword", targetName));        if (gte > 0) filter.put(getRange(gte));        /*Finishing aggs */        JSONObject compliance = new JSONObject(); aggs.put("Compliance", compliance);        JSONObject terms = new JSONObject(); compliance.put("terms", terms);        terms.put("field", "compliance.keyword");        JSONObject order = new JSONObject(); terms.put("order", order);        order.put("_count", "desc");        JSONObject innerAggs = new JSONObject(); compliance.put("aggs", innerAggs);        if (GROUP_NAME.equals(criteria)) {            JSONObject groupID = new JSONObject(); innerAggs.put(GROUP_NAME, groupID);            JSONObject innerTerms = new JSONObject(); groupID.put("terms", innerTerms);            innerTerms.put("field", "groupID.keyword");            innerTerms.put("size", maxResults);            JSONObject innerOrder = new JSONObject(); innerTerms.put("order", innerOrder);            innerOrder.put("_count", "desc");        } else if(RULE_NAME.equals(criteria)) {            JSONObject ruleID = new JSONObject(); innerAggs.put(RULE_NAME, ruleID);            JSONObject innerTerms = new JSONObject(); ruleID.put("terms", innerTerms);            innerTerms.put("field", "ruleID.keyword");            innerTerms.put("size", maxResults);            JSONObject innerOrder = new JSONObject(); innerTerms.put("order", innerOrder);            innerOrder.put("_count", "desc");        }        return request;    }    public class TempRecord{        String responseType;        String categoryName;        int categoryCount;        TempRecord(String responseType, String categoryName, int categoryCount){            this.responseType = responseType;            this.categoryName = categoryName;            this.categoryCount = categoryCount;        }        public String getResponseType(){            return responseType;        }        public String getCategoryName(){            return categoryName;        }        public int getCategoryCount(){            return categoryCount;        }    }}