// Copyright 1997-2003, Marimba, Inc. All Rights Reserved.// Confidential and Proprietary Information of Marimba, Inc.// Protected by or for use under one or more of the following patents:// U.S. Patent Nos. 5,919,247, 6,272,536, 6,367,075, 6,381,631,// and 6,430,608. Other Patents Pending.package com.marimba.apps.subscriptionmanager.webapp.actions;import com.azure.cosmos.util.CosmosPagedIterable;import com.marimba.apps.securitymgr.utils.json.JSONObject;import com.marimba.apps.subscriptionmanager.webapp.bean.anomaly.MachineNameList;import com.marimba.apps.subscriptionmanager.webapp.util.defensight.anomalyReport.AnomalyUtil;import com.marimba.apps.subscriptionmanager.SubscriptionMain;import com.marimba.apps.subscriptionmanager.TenantHelper;import com.marimba.intf.util.IDirectory;import com.marimba.tools.util.DebugFlag;import com.marimba.apps.subscriptionmanager.webapp.forms.AnomalyReportForm;import java.io.IOException;import java.io.PrintWriter;import com.marimba.intf.util.IConfig;import java.time.OffsetDateTime;import java.util.List;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;/** * Set the context and forwads on to the target view page. If 'forward' request parameter is set, * * <p>the action will forward to that page or action. This action may switch to single select mode * * <p>depending on the caller specified by the 'src' request parameter. * * @author Bhavesh Pandya * @version 1.0, 09/04/2023 */public final class AnomalyAction extends AbstractAction {  /**   * REMIND   *   * @param mapping REMIND   * @param form REMIND   * @param request REMIND   * @param response REMIND   * @return REMIND   * @throws IOException REMIND   * @throws ServletException REMIND   */  public static final int DEBUG = DebugFlag.getDebug("DEFENSIGHT/ACTION");  public ActionForward execute(      ActionMapping mapping,      ActionForm form,      HttpServletRequest request,      HttpServletResponse response)      throws IOException, ServletException, Exception {    init(request);    SubscriptionMain main = null;    String reqTenantName = TenantHelper.getTenantName(request);    main = TenantHelper.getTenantSubMain(context, request.getSession(), reqTenantName);    IDirectory features = main.getFeatures();    IConfig tunerConfig = (IConfig) features.getChild("tunerConfig");    AnomalyUtil anomalyUtil = new AnomalyUtil();    AnomalyReportForm anomalyReportForm = (AnomalyReportForm) form;    String action = request.getParameter("action");    System.out.println("AnomalyAction: action = "+action);    String intervalMinutes = request.getParameter("interval");    String hostname = request.getParameter("hostname");    if (action == null) {      anomalyUtil.setFormData(anomalyReportForm, tunerConfig);    } else if(action.equals("topLevelStats")) {      sendJSONResponse(response, anomalyUtil.getTopLevelStatsJson(tunerConfig, intervalMinutes).toString());    } else if(action.equals("machineLevelAnomaly")) {      sendJSONResponse(response, anomalyUtil.getMachineLevelAnomalyJson(tunerConfig, intervalMinutes, hostname).toString());    }    return (mapping.findForward("success"));  }  private void sendJSONResponse(HttpServletResponse response, String jsonData) throws Exception {    PrintWriter out = response.getWriter();    out.println(jsonData);    out.flush();  }}