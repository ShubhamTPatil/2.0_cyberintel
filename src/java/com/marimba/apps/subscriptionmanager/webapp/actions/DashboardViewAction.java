// Copyright 2019-2022, Harman International. All Rights Reserved.// Confidential and Proprietary Information of Harman International.// $File$, $Revision$, $Date$package com.marimba.apps.subscriptionmanager.webapp.actions;import com.marimba.apps.securitymgr.compliance.DashboardInfoDetails;import com.marimba.apps.securitymgr.compliance.DashboardHandler;import com.marimba.apps.subscription.common.ISubscriptionConstants;import com.marimba.apps.subscription.common.intf.IUser;import com.marimba.apps.subscriptionmanager.SubscriptionMain;import com.marimba.apps.subscriptionmanager.TenantHelper;import com.marimba.apps.subscriptionmanager.compliance.view.MachineBean;import com.marimba.intf.msf.*;import com.marimba.apps.subscription.common.objects.Target;import com.marimba.apps.subscriptionmanager.util.Utils;import com.marimba.apps.subscriptionmanager.intf.IErrorConstants;import com.marimba.apps.subscriptionmanager.intf.IWebAppConstants;import com.marimba.apps.subscriptionmanager.webapp.forms.NewDashboardViewForm;import com.marimba.intf.msf.ITenant;import com.marimba.intf.util.IConfig;import com.marimba.webapps.intf.IWebAppsConstants;import com.sun.jmx.snmp.tasks.Task;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.List;/** * Dashboard View Action  *  w.r.t show new dashboard data * * @author Nandakumar Sankaralingam * @version: $Date$, $Revision$ */public class DashboardViewAction extends AbstractAction implements IWebAppConstants, ISubscriptionConstants {    protected boolean useURIMapping(){        return true;    }    protected Task createTask(ActionMapping mapping, ActionForm form, HttpServletRequest request,HttpServletResponse response) {        return new DashboardViewAction.DashboardViewTask(mapping, form, request, response);    }    protected class DashboardViewTask extends SubscriptionDelayedTask {        NewDashboardViewForm dashboardForm;        DashboardViewTask(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {            super(mapping, form, request, response);            this.dashboardForm = (NewDashboardViewForm) form;        }        public void execute() {            System.out.println("DebugInfo: --- Called DashboardViewAction Class ---");            init(request);            String action = request.getParameter("action");            action = dashboardForm.getAction();            System.out.println("Debug-DashboardAction action ==> " + action);            try {            if (null == action || "view".equals(action)) {                DashboardHandler dashboardHandler = new DashboardHandler(main);                int totalMachineCount = dashboardHandler.getEnrolledMachines("%");                int checkedIn24Hrs = dashboardHandler.getLast24HourEnrolledMachineCount("%");                int totalWindowsMachineCount = dashboardHandler.getEnrolledMachinesByOS("Windows");                int totalLinuxMachineCount = dashboardHandler.getEnrolledMachinesByOS("Linux");                int totalMacMachineCount = dashboardHandler.getEnrolledMachinesByOS("MAC");                dashboardForm.setMachinesCount(String.valueOf(totalMachineCount));                dashboardForm.setMachineWindowsCount(String.valueOf(totalWindowsMachineCount));                dashboardForm.setMachineLinuxCount(String.valueOf(totalLinuxMachineCount));                dashboardForm.setMachineMacCount(String.valueOf(totalMacMachineCount));                forward = mapping.findForward("view");            }                            } catch(Exception ex) {                ex.printStackTrace();            }        }        public String getWaitMessage() {            return getString("page.global.processing");        }    }}