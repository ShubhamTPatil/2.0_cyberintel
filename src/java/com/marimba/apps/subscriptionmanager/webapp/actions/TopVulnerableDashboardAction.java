// Copyright 2019, Harman International. All Rights Reserved.// Confidential and Proprietary Information of Harman International.// $File: //depot/ws/products/securitypolicymanager/2.0_cyberintel/src/java/com/marimba/apps/securitymgr/webapp/actions/VDeskRuleAction.java $, $Revision: #5 $, $Date: 2023/06/17 $package com.marimba.apps.subscriptionmanager.webapp.actions;import com.marimba.apps.securitymgr.db.DatabaseAccess;import com.marimba.apps.securitymgr.db.QueryExecutor;import com.marimba.apps.subscriptionmanager.SubscriptionMain;import com.marimba.apps.subscriptionmanager.TenantHelper;import com.marimba.apps.subscriptionmanager.webapp.actions.AbstractAction;import com.marimba.intf.db.IStatementPool;import com.marimba.tools.util.DebugFlag;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.util.MessageResources;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import javax.servlet.ServletContext;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class TopVulnerableDashboardAction extends AbstractAction {    private JSONArray topVulnerableDetails;    private SubscriptionMain main;    public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)            throws IOException, ServletException {        ServletContext sc = servlet.getServletConfig().getServletContext();        main = TenantHelper.getTenantSubMain(sc, request);        String pageSize = request.getParameter("pageSize");        String filter = request.getParameter("filter");        String draw = request.getParameter("draw");        String pageNumber = request.getParameter("page");        try {            int offset = (Integer.parseInt(pageNumber) - 1) * Integer.parseInt(pageSize);            new QueryRunner(Integer.parseInt(pageSize), offset, filter);            JSONObject result = new JSONObject();            result.put("draw", draw);            result.put("recordsTotal", 1000);            result.put("recordsFiltered", 10);            result.put("data", topVulnerableDetails);            sendJSONResponse(response, result);        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    class QueryRunner extends DatabaseAccess {        public QueryRunner(int pageSize, int pageNumber, String filter) {            try {                runQuery(new GetTopVulnerableDetails(pageSize, pageNumber, filter));            } catch (Exception ex) {                ex.printStackTrace();            }        }        class GetTopVulnerableDetails extends QueryExecutor {            int pageNumber;            int pageSize;            String filter;            GetTopVulnerableDetails(int pageSize, int pageNumber, String filter) {                super(main);                this.pageNumber = pageNumber;                this.pageSize = pageSize;                this.filter = filter;            }            protected void execute(IStatementPool pool) throws SQLException {                String fetchTopVulQuery = "SELECT cve_id, severity, affected_machines, patch_id, status, risk_score FROM ds_derived_top_vuln ";                if (filter != null && !filter.isEmpty()) {                    fetchTopVulQuery += " WHERE status = '" + filter + "'";                }                fetchTopVulQuery += " ORDER BY cve_id" + " OFFSET " + pageNumber + " ROWS " + "FETCH NEXT " + pageSize + " ROWS ONLY";                topVulnerableDetails = new JSONArray();                PreparedStatement prepareStatement = pool.getConnection().prepareStatement(fetchTopVulQuery);                ResultSet rs = prepareStatement.executeQuery();                try {                    fetchAndGenerateTopVulJSON(rs);                } catch (Exception sqlException) {                    sqlException.printStackTrace();                } finally {                    rs.close();                    prepareStatement.close();                }            }            private void fetchAndGenerateTopVulJSON(ResultSet rs) {                try {                    while (rs.next()) {                        String cveID = rs.getString(1);                        String severity = rs.getString(2);                        String affectedMachines = rs.getString(3);                        String patchId = rs.getString(4);                        String status = rs.getString(5);                        String riskScore = rs.getString(6);                        JSONObject topVulJson = new JSONObject();                        topVulJson.put("cveId", cveID);                        topVulJson.put("severity", severity);                        topVulJson.put("affectedMachines", affectedMachines);                        topVulJson.put("patchId", patchId);                        topVulJson.put("status", status);                        topVulJson.put("riskScore", riskScore);                        topVulnerableDetails.put(topVulJson);                    }                } catch (Exception exception) {                    exception.printStackTrace();                }            }        }    }    public void sendJSONResponse(HttpServletResponse response, JSONObject jsonObject) throws Exception {        PrintWriter out = response.getWriter();        out.println(jsonObject.toString());        out.flush();    }}