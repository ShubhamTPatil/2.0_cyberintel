package com.marimba.apps.subscriptionmanager.webapp.util.defensight;import com.azure.cosmos.CosmosClient;import com.azure.cosmos.CosmosClientBuilder;import com.azure.cosmos.CosmosContainer;import com.azure.cosmos.CosmosDatabase;import com.azure.cosmos.models.CosmosQueryRequestOptions;import com.azure.cosmos.models.FeedResponse;import com.azure.cosmos.models.PartitionKey;import com.azure.cosmos.models.SqlParameter;import com.azure.cosmos.models.SqlQuerySpec;import com.azure.cosmos.util.CosmosPagedIterable;import com.fasterxml.jackson.databind.ObjectMapper;import com.marimba.intf.util.IConfig;import com.marimba.tools.util.DebugFlag;import com.marimba.apps.subscriptionmanager.webapp.util.defensight.AnomalyConstants;import com.marimba.apps.subscriptionmanager.webapp.util.defensight.AnomalyConstants.Queries;import com.marimba.apps.subscriptionmanager.webapp.bean.anomaly.User;//import java.com.marimba.apps.subscriptionmanager.webapp.bean.anomaly.pojo.TopLevelStatistics;import java.time.Clock;import java.time.OffsetDateTime;import java.util.ArrayList;import java.util.List;import java.util.Optional;import java.util.function.Function;import java.util.stream.Collectors;public class AnomalyUtil {  static IConfig config;  public final static int DEBUG = DebugFlag.getDebug("DEFENSIGHT/ACTION");  public IConfig getIConfig(IConfig config) {    return this.config = config;  }  static CosmosDatabase database;  static CosmosContainer container;  /**   * @param config   * @param chartType   * @param filters   * @return   * @throws Exception   */  public List<User> fetchDataForChart(IConfig config, String chartType, String... filters)      throws Exception {    getCosmosConnection(config);    switch (chartType) {      case "heatmapData":        return populateScatterChartData(filters);      default:    }    return null;  }  public void getCosmosConnection(IConfig config) {    String containerName = config.getProperty(AnomalyConstants.CONTAINER_NAME);    String databaseName = config.getProperty(AnomalyConstants.DATABASE_NAME);    String host = config.getProperty(AnomalyConstants.HOST);    String key = config.getProperty(AnomalyConstants.KEY);    try {      CosmosClient          client = new CosmosClientBuilder()          .endpoint(host)          .key(key)          .buildClient();      log("getCosmosConnection():connection established successfully ");      database = client.getDatabase(databaseName);      container = database.getContainer(containerName);    } catch (Exception e) {      e.printStackTrace();    }  }  private List<User> populateScatterChartData(String[] filters) throws Exception {    CosmosQueryRequestOptions options = new CosmosQueryRequestOptions();    options.setPartitionKey(new PartitionKey(AnomalyConstants.PARTITION_KEY));    ArrayList<SqlParameter> paramList = new ArrayList<SqlParameter>();    OffsetDateTime currentTime = OffsetDateTime.now(Clock.systemUTC());    paramList.add(new SqlParameter("@ctime", currentTime.toString()));    paramList.add(        new SqlParameter("@ptime", getEndTime(Integer.parseInt(filters[0])).toString()));    return readTopLevelStatsData(executeQuery(new SqlQuerySpec(        Queries.SCATTER_CHART_QUERY,        paramList)));  }  private CosmosPagedIterable<User> executeQuery(SqlQuerySpec querySpec) {    String userData = null;    CosmosPagedIterable<User> filterUserRecords = container.queryItems(querySpec,        new CosmosQueryRequestOptions(), User.class);    return filterUserRecords;  }  private List<User> readTopLevelStatsData(CosmosPagedIterable<User> filterUserRecords) {    return filterUserRecords.stream()        .limit(5000) //TODO : remove this limit and set it from query level        .collect(Collectors.toList());  }   /* try {      ObjectMapper mapper = new ObjectMapper();      userData = mapper.writeValueAsString(users);    } catch (Exception e) {      e.printStackTrace();    }    return null;  }*/  // List<User> mapUserData();  private String getEndTime(int minutes) {    return OffsetDateTime.now(Clock.systemUTC()).minusMinutes(minutes).toString();  }  private void debugInfo(String msg) {    if (DEBUG >= 5) {      System.out.println("DEBUG:AnomalyAction : " + msg);    }  }  private void log(String msg) {    if (DEBUG >= 3) {      System.out.println("LogInfo:AnomalyAction : " + msg);    }  }}